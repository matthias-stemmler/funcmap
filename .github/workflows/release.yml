name: Release

on:
  push:
    branches:
      - main
      - hotfix/**

env:
  BUMP_FILE: .version-bump
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  # renovate: datasource=crate depName=cargo-release
  VERSION_CARGO_RELEASE: 0.20.2
  # renovate: datasource=crate depName=convco
  VERSION_CONVCO: 0.3.8

jobs:
  ci:
    name: CI
    uses: ./.github/workflows/ci.yml

  test:
    name: Test
    uses: ./.github/workflows/test.yml

  release-merged:
    name: Find merged release PR
    runs-on: ubuntu-latest

    steps:
      - name: Get merged PR
        id: get-merged-pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release
        id: release
        if: contains(steps.get-merged-pr.outputs.labels, 'release:pending')
        env:
          BODY: ${{ steps.get-merged-pr.outputs.body }}
        run: |
          version=$(echo "$BODY" | sed -n 's/<!-- VERSION:\(.*\) -->/\1/p')
          echo "Version: $version"
          echo "::set-output name=version::$version"
          echo '::set-output name=is-release::true'

    outputs:
      is-release: ${{ steps.release.outputs.is-release }}
      version: ${{ steps.release.outputs.version }}
      pr-number: ${{ steps.get-merged-pr.outputs.number }}

  update-pending-release:
    name: Update pending release
    runs-on: ubuntu-latest
    needs: release-merged
    if: ${{ !needs.release-merged.outputs.is-release }}

    steps:
      - name: Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ~/.cargo/
          key: cargo-bin-cargo-release-${{ env.VERSION_CARGO_RELEASE }}-convco-${{ env.VERSION_CONVCO }}

      - name: Install `cargo-release`
        if: ${{ !steps.cache.outputs.cache-hit }}
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-release
          version: ${{ env.VERSION_CARGO_RELEASE }}

      - name: Install `convco`
        if: ${{ !steps.cache.outputs.cache-hit }}
        uses: actions-rs/install@v0.1
        with:
          crate: convco
          version: ${{ env.VERSION_CONVCO }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine version bump
        id: bump
        run: |
          type=$(<"$BUMP_FILE")

          case "$type" in
            semantic)
              level="$(convco version --bump --label)" ;;

            major|minor|patch)
              level="$type" ;;

            *)
              >&2 echo "Invalid version bump type '$type'"
              exit 1 ;;
          esac

          echo "Version bump type: $type"
          echo "Version bump level: $level"

          echo "::set-output name=type::$type"
          echo "::set-output name=level::$level"

      - name: Check version bump level
        if: startsWith(github.ref_name, 'hotfix/')
        env:
          LEVEL: ${{ steps.bump.outputs.level }}
        run: |
          case "$LEVEL" in
            patch|release)
              ;;

            *)
              >&2 echo "Illegal version bump level '$LEVEL' for hotfix release"
              exit 1 ;;
          esac

      - name: cargo-release preparation
        id: prepare-release
        run: |
          git config user.name 'GitHub' 
          git config user.email 'noreply@github.com'

          cat <<EOF > ~/.release.toml
            consolidate-commits = true
            pre-release-commit-message = "{{version}}"
          EOF

          echo "::set-output name=pre-release-commit::$(git rev-parse HEAD)"

      - name: Run `cargo release`
        uses: actions-rs/cargo@v1
        with:
          command: release
          args: ${{ steps.bump.outputs.level }} --execute --no-confirm --no-publish --no-tag --no-push

      - name: Check for release
        id: check-release
        env:
          PRE_RELEASE_COMMIT: ${{ steps.prepare-release.outputs.pre-release-commit }}
        run: |
          if [ $(git rev-parse HEAD) != "$PRE_RELEASE_COMMIT" ]; then
            echo 'Change found'
            echo '::set-output name=found::true'
          else
            echo 'No change found' 
          fi

      - name: Determine version and reset commit
        id: version
        if: steps.check-release.outputs.found
        run: |
          version=$(git log --max-count=1 --pretty='format:%s')
          git reset HEAD~

          echo "Version: $version"
          echo "::set-output name=version::$version"

      - name: Reset version bump file
        if: steps.check-release.outputs.found
        run: echo 'semantic' > "$BUMP_FILE"

      - name: Get release notes from changelog
        id: release-notes
        if: steps.check-release.outputs.found
        shell: bash
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo 'RELEASE_NOTES<<EOF' >> "$GITHUB_ENV"
          ./.github/workflows/release_notes.sh CHANGELOG.md "$VERSION" >> "$GITHUB_ENV"
          echo 'EOF' >> "$GITHUB_ENV"

      - name: Create pull request
        if: steps.check-release.outputs.found
        uses: peter-evans/create-pull-request@v3
        with:
          branch: release/${{ github.ref_name }}
          commit-message: "chore: bump version to ${{ steps.version.outputs.version }}"
          delete-branch: true
          labels: release:pending
          title: Release v${{ steps.version.outputs.version }}
          body: |
            <!-- VERSION:${{ steps.version.outputs.version }} -->

            | Name                   | Value                                              |
            | ---------------------- | -------------------------------------------------- |
            | **Version**            | `${{ steps.version.outputs.version }}`             |
            | **Version bump type**  | `${{ steps.bump.outputs.type }}`                   |
            | **Version bump level** | `${{ steps.bump.outputs.level }}`                  |
            | **Base branch**        | `${{ github.ref_name }}`                           |

            ${{ env.RELEASE_NOTES }}

  publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - release-merged
      - ci
      - test
    if: needs.release-merged.outputs.is-release
    environment: crates.io
    concurrency: production

    steps:
      - name: Cache 
        id: cache
        uses: actions/cache@v2
        with:
          path: ~/.cargo/
          key: cargo-workspaces

      - name: Install `cargo-workspaces`
        if: ${{ !steps.cache.outputs.cache-hit }}
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-workspaces

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get release notes from changelog
        id: release-notes
        shell: bash
        env:
          VERSION: ${{ needs.release-merged.outputs.version }}
        run: |
          echo 'RELEASE_NOTES<<EOF' >> "$GITHUB_ENV"
          ./.github/workflows/release_notes.sh CHANGELOG.md "$VERSION" >> "$GITHUB_ENV"
          echo 'EOF' >> "$GITHUB_ENV"

      - name: Publish release
        env:
          TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          output=$(cargo workspaces publish --yes --from-git --token "$TOKEN" 2>&1)
          echo "$output"
          echo 'Crate URLs:'
          echo 'CRATE_URLS<<EOF' >> "$GITHUB_ENV"
          echo "$output" | sed -n 's/.*\bpublished \(.*\) v\(.*\)/- https:\/\/crates.io\/crates\/\1\/\2/p' | tac | tee --append "$GITHUB_ENV"
          echo 'EOF' >> "$GITHUB_ENV"

      - name: Create tag and GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.release-merged.outputs.version }}
          tag_name: v${{ needs.release-merged.outputs.version }}
          body: |
            **Published crates:** 
            ${{ env.CRATE_URLS }}

            ${{ env.RELEASE_NOTES }}

      - name: Remove `release:pending` label from pull request
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ needs.release-merged.outputs.pr-number }}
          labels: release:pending

      - name: Add `release:published` label to pull request
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ needs.release-merged.outputs.pr-number }}
          labels: release:published
